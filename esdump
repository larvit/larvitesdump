#!/usr/bin/env node
'use strict';

const	childProcs	= [],
	spawn	= require('child_process').spawn,
	argv	= require('minimist')(process.argv.slice(2)),
	prcs	= require('os').cpus().length,
	http	= require('http');

let	indexName	= argv._[0] || false,
	typeName	= argv._[1] || false,
	esProt	= argv.protocoll	|| 'http',
	esHost	= argv.h || '127.0.0.1',
	esPort	= argv.P || '9200',
	esUrl	= esProt + '://' + esHost + ':' + esPort + '/',
	esdumpServer;

function killAll() {
	setTimeout(function () {
		for (let i = 0; childProcs[i] !== undefined; i ++) {
			childProcs[i].kill();
		}
		process.exit();
	}, 500);
}

// Start esdump http server
esdumpServer = http.createServer(function (req, res) {
	req.on('data', function (chunk) {
		if (chunk.length === 3 && chunk.toString() === 'EOF') {
			killAll();
		} else if (chunk.length === 9 && chunk.toString() === 'EOF_ERROR') {
			console.error('Child error');
			process.exit(1);
		} else {
			process.stdout.write(chunk);
		}
	});

	req.on('end', function () {
		res.writeHead(200, { 'Content-Type': 'text/plain' });
		res.end('ok');
	});
});
esdumpServer.listen(27000);

// Start worker childs (esCaller.js)
for (let i = 0; prcs >= i; i ++) {
	const	esCallerOpts	= {},
		procNr	= i;

	let	childProc;

	esCallerOpts['esUrl']	= esUrl;
	esCallerOpts['indexName']	= indexName;
	esCallerOpts['typeName']	= typeName;
	esCallerOpts['esCallerProcNr']	= procNr;
	esCallerOpts['nextEsCallerPort']	= 27002 + i;
	esCallerOpts['esCallerProcAmount']	= prcs;

	if (i >= prcs) {
		esCallerOpts['nextEsCallerPort']	= 27001;
	}

	childProc	= spawn('node', [__dirname + '/esCaller.js', JSON.stringify(esCallerOpts)]);

	childProc.stdout.on('data', function (data) {
		console.log('procNr ' + procNr + ' data: ' + data);
		killAll();
	});

	childProc.stderr.on('data', function (data) {
		console.log('procNr ' + procNr + ' err: ' + data);
		killAll();
	});

	childProc.on('close', function () {
		console.log('procNr ' + procNr + ' dieded! I lovded you process, I lovded you so!');
		killAll();
	});

	childProcs.push(childProc);
}